{"ast":null,"code":"export const jsonToCsv = json => {\n  if (json !== \"\") {\n    try {\n      const parsedJson = JSON.parse(json);\n      const obj = {\n        count: 2,\n        items: parsedJson\n      };\n      console.log(\"parsedJson\", parsedJson);\n      const header = Object.keys(parsedJson.items[0]).join(\",\");\n      console.log(\"header\", header);\n      const body = parsedJson.items.map(j => Object.values(j).join(\",\")).join(\"n\");\n      console.log(\"body\", body);\n      return `${header}\\n${body}`;\n    } catch (e) {\n      return;\n    }\n  } else {\n    return;\n  }\n};","map":{"version":3,"sources":["/Users/rodrigo/Desktop/json2csv/json2csv/src/utils/JsonToCsv/index.tsx"],"names":["jsonToCsv","json","parsedJson","JSON","parse","obj","count","items","console","log","header","Object","keys","join","body","map","j","values","e"],"mappings":"AAEA,OAAO,MAAMA,SAAoB,GAAIC,IAAD,IAAU;AAC5C,MAAIA,IAAI,KAAK,EAAb,EAAiB;AACf,QAAI;AACF,YAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAnB;AACA,YAAMI,GAAG,GAAG;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,KAAK,EAAEL;AAAnB,OAAZ;AAEAM,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,UAA1B;AACA,YAAMQ,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYV,UAAU,CAACK,KAAX,CAAiB,CAAjB,CAAZ,EAAiCM,IAAjC,CAAsC,GAAtC,CAAf;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,MAAtB;AAEA,YAAMI,IAAI,GAAGZ,UAAU,CAACK,KAAX,CACVQ,GADU,CACLC,CAAD,IAAYL,MAAM,CAACM,MAAP,CAAcD,CAAd,EAAiBH,IAAjB,CAAsB,GAAtB,CADN,EAEVA,IAFU,CAEL,GAFK,CAAb;AAGAL,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBK,IAApB;AAEA,aAAQ,GAAEJ,MAAO,KAAII,IAAK,EAA1B;AACD,KAdD,CAcE,OAAOI,CAAP,EAAU;AACV;AACD;AACF,GAlBD,MAkBO;AACL;AACD;AACF,CAtBM","sourcesContent":["import { JsonToCsv } from \"./types\";\n\nexport const jsonToCsv: JsonToCsv = (json) => {\n  if (json !== \"\") {\n    try {\n      const parsedJson = JSON.parse(json);\n      const obj = { count: 2, items: parsedJson };\n\n      console.log(\"parsedJson\", parsedJson);\n      const header = Object.keys(parsedJson.items[0]).join(\",\");\n      console.log(\"header\", header);\n\n      const body = parsedJson.items\n        .map((j: any) => Object.values(j).join(\",\"))\n        .join(\"n\");\n      console.log(\"body\", body);\n\n      return `${header}\\n${body}`;\n    } catch (e) {\n      return;\n    }\n  } else {\n    return;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}