{"ast":null,"code":"export const jsonToCsv = json => {\n  const one = JSON.parse(json);\n  console.log(\"one\", one);\n  const two = Object.keys(one.items[0]).join(\",\");\n  console.log(\"two\", two);\n\n  if (json !== \"\") {\n    try {\n      const parsedJson = JSON.parse(json);\n      const header = Object.keys(parsedJson.items[0]).join(\",\");\n      const body = parsedJson.items.map(j => Object.values(j).join(\",\")).join(\"n\");\n      return `${header}\\n${body}`;\n    } catch (e) {\n      return;\n    }\n  } else {\n    return;\n  }\n};","map":{"version":3,"sources":["/Users/rodrigo/Desktop/json2csv/json2csv/src/utils/JsonToCsv/index.tsx"],"names":["jsonToCsv","json","one","JSON","parse","console","log","two","Object","keys","items","join","parsedJson","header","body","map","j","values","e"],"mappings":"AAEA,OAAO,MAAMA,SAAoB,GAAIC,IAAD,IAAU;AAC5C,QAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,GAAnB;AAEA,QAAMK,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYP,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAAZ,EAA0BC,IAA1B,CAA+B,GAA/B,CAAZ;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,GAAnB;;AAEA,MAAIN,IAAI,KAAK,EAAb,EAAiB;AACf,QAAI;AACF,YAAMW,UAAU,GAAGT,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAnB;AAEA,YAAMY,MAAM,GAAGL,MAAM,CAACC,IAAP,CAAYG,UAAU,CAACF,KAAX,CAAiB,CAAjB,CAAZ,EAAiCC,IAAjC,CAAsC,GAAtC,CAAf;AACA,YAAMG,IAAI,GAAGF,UAAU,CAACF,KAAX,CACVK,GADU,CACLC,CAAD,IAAYR,MAAM,CAACS,MAAP,CAAcD,CAAd,EAAiBL,IAAjB,CAAsB,GAAtB,CADN,EAEVA,IAFU,CAEL,GAFK,CAAb;AAIA,aAAQ,GAAEE,MAAO,KAAIC,IAAK,EAA1B;AACD,KATD,CASE,OAAOI,CAAP,EAAU;AACV;AACD;AACF,GAbD,MAaO;AACL;AACD;AACF,CAvBM","sourcesContent":["import { JsonToCsv } from \"./types\";\n\nexport const jsonToCsv: JsonToCsv = (json) => {\n  const one = JSON.parse(json);\n  console.log(\"one\", one);\n\n  const two = Object.keys(one.items[0]).join(\",\");\n  console.log(\"two\", two);\n\n  if (json !== \"\") {\n    try {\n      const parsedJson = JSON.parse(json);\n\n      const header = Object.keys(parsedJson.items[0]).join(\",\");\n      const body = parsedJson.items\n        .map((j: any) => Object.values(j).join(\",\"))\n        .join(\"n\");\n\n      return `${header}\\n${body}`;\n    } catch (e) {\n      return;\n    }\n  } else {\n    return;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}